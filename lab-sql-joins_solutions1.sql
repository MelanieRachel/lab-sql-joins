-- LAB SQL JOINS

-- List the number of films per category.
SELECT name AS category_name, COUNT(f.film_id) AS num_films
FROM sakila.category AS cat
INNER JOIN sakila.film_category AS fc ON cat.category_id = fc.category_id
INNER JOIN sakila.film AS f ON fc.film_id = f.film_id
GROUP BY cat.name;

-- Retrieve the store ID, city, and country for each store.
SELECT store.store_id, city.city, country.country
FROM sakila.store
INNER JOIN sakila.address ON store.address_id = sakila.address.address_id
INNER JOIN sakila.city ON sakila.address.city_id = city.city_id
INNER JOIN sakila.country ON city.country_id = country.country_id;

-- Calculate the total revenue generated by each store in dollars.
SELECT store.store_id, SUM(sakila.payment.amount) AS total_revenue
FROM sakila.store AS s
INNER JOIN sakila.staff AS st ON s.manager_staff_id = st.staff_id
INNER JOIN sakila.payment ON st.staff_id = sakila.payment.staff_id;

-- Determine the average running time of films for each category.
SELECT name AS category_name, round(AVG(f.length),0) AS avg_time
FROM sakila.category AS cat
INNER JOIN sakila.film_category AS fc ON cat.category_id = fc.category_id
INNER JOIN sakila.film AS f ON fc.film_id = f.film_id
GROUP BY cat.name;

-- SELECT cat.name AS category_name, ROUND(AVG(f.length), 0) AS avg_time
SELECT name AS category_name, round(AVG(f.length),0) AS avg_time
FROM sakila.category AS cat
INNER JOIN sakila.film_category AS fc ON cat.category_id = fc.category_id
INNER JOIN sakila.film AS f ON fc.film_id = f.film_id
GROUP BY cat.name
ORDER BY avg_time DESC
LIMIT 1;

-- Display the top 10 most frequently rented movies in descending order.
SELECT f.title AS movie_title, COUNT(r.rental_id) AS rental_count
FROM sakila.film AS f
INNER JOIN sakila.inventory AS i ON f.film_id = i.film_id
INNER JOIN sakila.rental AS r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title AS movie_title FROM sakila.film AS f
INNER JOIN sakila.inventory AS i ON f.film_id = i.film_id
INNER JOIN sakila.store AS s ON i.store_id = s.store_id
WHERE f.title LIKE "%Academy Dinosaur%"
AND s.store_id = 1;

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT DISTINCT f.title AS movie_title,
IFNULL
(CASE WHEN i.inventory_id IS NOT NULL THEN 'Available'
	  ELSE 'NOT Available'
 END,
     'NOT Available') AS availability_status
FROM sakila.film AS f
LEFT JOIN sakila.inventory AS i ON f.film_id = i.film_id;
